% -*- mode: noweb; noweb-default-code-mode: R-mode; -*-
%\VignetteIndexEntry{mefa vignette}

%clear this section
%setwd("c:/myR/mefa/vignette")
%Sweave("mefa-vignette.Rnw",output="mefa-vignette.tex",eps=FALSE)

\documentclass[a4paper]{article}

\usepackage[pdftex,bookmarks,colorlinks=false]{hyperref}
\usepackage[pdftex]{graphics}
\usepackage[latin2]{inputenc}
\usepackage[english]{babel}
\usepackage[T1]{fontenc}
\usepackage[sort&compress]{natbib}

\author{Péter Sólymos\thanks{Péter Sólymos, Department of Ecology, Faculty of Veterinary Science, Szent István University, Rottenbiller Str.~50, 1077 Budapest, Hungary. e-mail: \href{mailto:Solymos.Peter@aotk.szie.hu}{Solymos.Peter@aotk.szie.hu}.
}}
\title{From faunistic records to analysis}

\begin{document}
\SweaveOpts{strip.white=TRUE}

\maketitle

\begin{abstract}

\noindent
The document shows the general way to make \texttt{mefa} objects. Here I give a short conceptual description highlighting main features that are especially useful for faunistic count data.

\end{abstract}

\tableofcontents

\section{Introduction -- motivation}

Data resulting from field inventories are often stored primarily in a hard copy notebook format, which are subsequently typed into a spreadsheet. These spreadsheets contain location (samples) and taxon (species) specific information and respective count data. These data can rarely be used directly in a statistical analysis, because one often need sample and species specific attributes to account for a given question or hypothesis. 

The manipulation of the data (most commonly subseting and ordering) is time consuming and may lead to mistakes, and mistakes may lead to false conclusions. Thus it is advisable to rigorously check each step in such manipulation process. These problems can be avoided by using sophisticated database servers and database connections prior to analysis, but such instruments need IT skills that are sometimes out of the capabilities of an individual researcher or naturalist.

Thus, the name \texttt{mefa} stands for metafaunistics, indicating that handling of basic data is only the first, but the most critical and sometimes most time consuming part of data analysis. The aim of the \texttt{mefa} package is to give a solution in \texttt{R} for the specific requirements needed for faunistic data, shorten the time spent with data preparation and reduce mistakes during data management. Here I give a short overview of the (1) general data model behind 'mefa' objects, (2) main functions of the package, and (3) reporting options.

\section{General data model}

General database representation of biotic (faunistic) data may include four modules according to Samu\cite{Samu99}: the project, sample, taxon, and results modules. The project module describes meta-data and background circumstances of a given field experiment. Sample module describes information relevant to the data collecting event and variables that can vary relative to the fixed project design. The taxon module deals with the taxonomic identity of the biological object. The quantitative outcome of the study is handled in the results module.
For a given analysis, only a subset of these modules are necessary, but in an organised format. A \texttt{mefa} object is a project-oriented representation (subset) of the general database that can be used in subsequent analyses, were the data stored in the results module determines subsets taken from the sample and taxon modules based on the relational links provided by sample and taxon specific identifiers. Project module may also contain information for manipulating sample and results modules in the pre-processing phase (eg. subseting results or compiling sample attributes).

\section{Workflow in \texttt{mefa}}

\subsection{The faunistic part: the catch}

A basic table of count data resembles a sheet in a notebook, where one takes notes during the identification process, like in the \texttt{dolina} example data set (only first ten rows for brevity): 

<<>>=
library(mefa)
data(dol.count)
dol.count[1:10,]
@

This data frame contanis four columns. Samples are the samples taken in the field. Heere we used five minutes search for snails in a one meter radius. Sample identifiers contain two numbers and a letter. First (numeric) character indicates sampling location, second (nonnumeric) character stands for the investigeted microhabitat (A: litter, H: coarse woody debris, L: living trees, R: rock), third (numeric) character indicates the replicate within microhabitats as strata. Eg.~1A1 is the sample taken from the first location (one out of the studied dolinas), it is a litter microhabitat, and the first replicate out of seven, etc. 

Species names are short identifiers (discussed later), segment refers to life stages of the individuals found (broken: broken shells of dead animals, fresh: intact shells of dead animals, adult: adult live animal, juvenile: juvenile live animal). Count column indicates the number of specimens that can be characterised by the information in the rorresponding row.

What are \texttt{<NA>}-s? This data frame contains sample and taxonomic information in shortened way, sample and species identifiers are shown only for the first cases. This "notebook-style" data can be filled with respective data by the function \texttt{fill.count}:

<<>>=
fill.count(dol.count)[1:10,]
@

In this way, "notebook-style" data can be readily converted into an \texttt{sscount} (species/sample/count) object:

<<>>=
ssc <- sscount(fill.count(dol.count), zc="zero.count")
@

The \texttt{zc} flag is important, because it contains information on the (arbitrarily named) "pseudo-species" used in \texttt{dol.count} object referring to samples where total count was zero, like in the first row (sample 1A1). Default for \texttt{zc} is \texttt{NULL}.

In this \texttt{sscount} object way, rows represent the basic units (lots) containing sample, species and segment identifiers (treated as characters) and the count (treated as numeric, but for further operations this should preferably be an integer). An \texttt{sscount}object is a list of five objects:

<<>>=
str(ssc)
@

\texttt{ssc\$data} contains the data taken from the filled data frame of \texttt{dol.count}.
Cross-tabulation of an \texttt{sscount} object results in an \texttt{xcount} object. Crosstabulation can be done for any segments, listed by

<<>>=
ssc$segment.levels
@

or for all segments depending on the value of the segment specifier (default is \texttt{segment = "all"} (or equivalently \texttt{segment = 0}), meaning all the segments are summed up within lots). For all segments, use:

<<>>=
xc <- xcount(ssc)
str(xc)
@

For broken shells only:

<<>>=
xc.broken <- xcount(ssc, "broken")
str(xc.broken)
@

The pseudo-species for zero count samples is removed from the resulting \texttt{xcount} object, but an empty row is placed in the table. Empty rows of an \texttt{xcount} object can be removed by the function \texttt{exclmf}, detailed later. 

Data tables can also be converted into \texttt{sscount} or \texttt{xcount} objects by using the functions \texttt{ttsscount} (data without unique row identifiers, use \texttt{drtsscount}) or \texttt{as.xcount} respectively (for details, see manual). Two \texttt{sscount} or \texttt{xcount} objects can be merged by functions \texttt{msscount} and \texttt{mxcount} respectively (for details, see manual).

\subsection{The meta part: sample and species attributes}

When we have goodfaunistic data, that is half way of a data inicialization. To have attributes of the samples and the taxa with the same consistency is also desirable. These attributes often are very basic. Eg. for samples, the sample identifier,  location, date of collection and name of collector (basic biotic data):

<<>>=
data(dol.sample)
str(dol.sample)
@

For species, eg. full species names, higher level taxonomic information, shell size:

<<>>=
data(landsnail)
str(landsnail)
@

Once we have the crosstabulated data (\texttt{xc}) and attributes for samples and species, we have to checks the integrity of sample/species attribute tables and a given \texttt{xcount} object:

<<>>=
check.attrib(xc, which="samples", dol.sample, 1)
check.attrib(xc, which="species", landsnail, 2)
@

If check results indicate full match of sample/species identifiers (without duplicates and missing elements), an \texttt{xorder} object can be created from an attribute table :

<<>>=
xo1 <- xorder(xc, which="samples", dol.sample, 1)
xo2 <- xorder(xc, which="species", landsnail, 2)
@

In these \texttt{xorder} objects (\texttt{xo1} and \texttt{xo2}), original data are subsetted and ordered according to the rows/column names of the \texttt{xcount} (\texttt{xc}) object. A \texttt{mefa} object is a bundle of an \texttt{xcount} and two \texttt{xorder} (one for sample and one for species attributes) objects: 

<<>>=
mf <- mefa(xc, xo1, xo2)
str(mf)
@

As you can see, the \texttt{mefa} object contains all necessary information for reporting and further analysis. Additional attributes can be added later to a \texttt{mefa} object by the function \texttt{add.attrib} (for details, see manual).

The \texttt{mefa} object (and \texttt{xcount} as well) can be stratified according to sample/species groups (e.g. in case of hierarchical sampling design, or using taxonomic or trophic groups of species):

<<>>=
mic <- strify(mf, "microhabitat", "samples")
str(mic)
fam <- strify(mf, "familia", "species")
str(fam)
mic.fam <- strify(mic, mf$species.attr$familia, "species")
mic.fam
@

The result is always and xcount object, because, due to stratification, attribute consistency diminishes. By using new attribute tables, a \texttt{mefa} new object can be created.

Parts of a \texttt{mefa} or \texttt{xcount} object can be excluded in this way:

<<>>=
ex1 <- exclmf(mf, which = "samples", empty = TRUE,
       excl = which(mf$sample.attr$microhabitat == "litter"))
levels(mf$sample.attr$microhabitat)
levels(ex1$sample.attr$microhabitat)

ex2 <- exclmf(mic.fam, "species", c(2,3), empty = TRUE)
ex2
@

In the resulting mefa object, respective parts will be excluded for both the crosstabulation and attribute teble. Empty rows (samples) can be removed by \texttt{empty = FALSE}:

<<>>=
mf0 <- exclmf(mf, which = "samples", excl = NULL, empty = FALSE)
dim(mf$xcount)
dim(mf0$xcount)
@

\section{Reporting with \texttt{mefa}}

Parts of the \texttt{mefa} object can be reported by the \texttt{report.mefa} function into a plain text or preformatted \LaTeX file (\texttt{tex} operator) containing italicised species names, optionally authors and description dates (\texttt{author} specifier), sectioning (according to species or samples, \texttt{order} operator) and with or without count data (\texttt{binary} oprator):

<<>>=
report.mefa("dolina-report.tex", mf, order = "species", 
    biotic.data = c(1:5), 
    species.name = "spec.name", species.order = 1, author = 0, 
    tex = TRUE, binary = FALSE, sep = c(", ", " (", ")", "; "))
@

The result will look like this:

\vspace{0.5cm}

\begin{minipage}{1\textwidth}

\input{dolina-report.tex}

\end{minipage}

\vspace{0.5cm}

Reporting can be useful for making official reports of inventories or presenting data in supporting online material of manuscripts. The \LaTeX output file can be easily copied or included into documents eg.~in the way presented in the text window by typing (\texttt{Sweave}-ing is currently not available):

<<results=hide>>=
mefadocs("SampleReport")
@ 

\section{Further data analysis}

The cross-tabulated count data stored in \texttt{xcount} and \texttt{mefa} objects can be used readily to calculate sample specific results (abundance, richness, etc.) or can be used in multivariate analyses. These possibilities of further data analyses are illustrated in the demo script:

<<results=hide>>=
demo(dolina)
@
\bibliographystyle{plain}
\bibliography{mefa}

\end{document}
